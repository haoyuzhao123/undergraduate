2016012390
赵浩宇
Cache Lab实验报告

Part 1 高速缓存模拟器
    根据题目要求，首先实现了CacheLine结构体，之后使用malloc函数进行初始化。之后使用LRU算法，进行模拟。注意到我们只用实现L即可，因为S其实就是一个L，而且M就是一个L加上一次Hit。

Part 2 矩阵转置
    1. 32x32
        由于B = 32, 而且S = 32，所以每一次可以读取8个int，而且可以写入8行而不冲突，所以选取8x8的分块进行转置。这样每转置8x8的矩阵需要miss 16次，可以满足题目要求。

    2. 64x64    
        依然进行8x8的分块，但是原本32x32矩阵的直接分块在这里并不适用，这是因为S=32，但是32 / (64 / 8) = 4，所以第i行和第i+4行会冲突。如果只是使用4x4的分块，不能满足题目要求。所以我们依然进行8x8的分块，但是把每一个8x8的矩阵变为4个4x4的矩阵进行处理。不妨设A,B中两个8x8的矩阵为A_1,A_2,A_3,A_4与B_1,B_3;B_2,B_4，其中A' = [A_1,A_2;A_3,A_4],B' = [B_1,B_2;B_3,B_4]。下面描述转置的方法:
        1. 首先读取A'的前4行，即[A_1,A_2]，并且将[A_1',A_2']放入B的前4行，其中A_1'与A_2'为A_1,A_2的转置。
        2. 读取A_3的第一列，以及B_2的第一行，并且将A_3的第一列放入B_2的第一行。之后将之前读取的B_2的第一行放入B_3的第一行。
        3. 读取A_4的第一列，放入B_4的第一行。
        4. 重复2,3，对操作的行与列进行修改，使得完成转置。

        首先在步骤一A',B'的上半部分读取均会产生4次miss,最终产生8次miss，关于第二步，不管第二步进行了多少次，读取A'的下半部分只需要4次miss。然而每次读取B_2的一行时，由于B_2原本都在缓存中，所以不会有miss产生，但是写入B_3的时候会产生miss，写入了4行，会产生4次miss。所以理论上对8x8的一个块进行转置产生的miss为16次，加上一些其他的不可预知的问题，也会满足题目的要求。

    3. 61x67
        由于行与列都为质数，所以可以进行分块。对每一块的边长参数进行调整，可以得到当边长为22的时候满足题目要求。
