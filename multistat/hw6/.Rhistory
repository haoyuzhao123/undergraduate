slpit
split
split(vector)
p <- split(vector, 2)
p
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
vector(1)
vector(1:200)
vector(1:10)
vector[1:10]
vector[-1:10]
vector[-(1:10)]
t <- matrix(1:20, 4, 5)
t
t[c(1,2,4),]
t <- (1+1):(5+5)
t
generate_class_one <- function(n, withnoise = FALSE) {
if (withnoise == FALSE) {
data_vec <- rnorm(4*n)
return(matrix(data_vec, n, 4))
}
else {
data_vec <- rnorm(10 * n)
return(matrix(data_vec, n, 10))
}
}
generate_class_two <- function(n, withnoise = FALSE) {
data_mat <- matrix(nrow = 0, ncol = 4)
i = 0
while (i < n) {
vec <- rnorm(4)
value = sum(vec ** 2)
if (value > 9 && value < 16) {
i = i + 1
data_mat <- rbind(data_mat, vec)
}
}
if (withnoise == TRUE) {
noise_data <- rnorm(6 * n)
noise_mat <- matrix(noise_data, n, 6)
data_mat <- cbind(data_mat, noise_mat)
}
return(matrix(data_mat,n))
}
generate_without_noise <- function(n) {
c1 <- generate_class_one(n)
c2 <- generate_class_two(n)
training_data <- rbind(c1, c2)
return(training_data)
}
generate_with_noise <- function(n) {
c1_n <- generate_class_one(n, TRUE)
c2_n <- generate_class_two(n, TRUE)
training_data <- rbind(c1_n, c2_n)
return(training_data)
}
generate_labels <- function(n) {
labels <- c(rep(1,n), rep(0,n))
}
training_data_nnoise <- generate_without_noise(100)
training_data_noise <- generate_with_noise(100)
testing_data_nnoise <- generate_without_noise(1000)
testing_data_noise <- generate_with_noise(1000)
training_labels_nnoise <- generate_labels(100)
training_labels_noise <- generate_labels(100)
testing_labels_nnoise <- generate_labels(1000)
testing_labels_noise <- generate_labels(1000)
set.seed(123123)
costJ <- function(c,Sigma,training_data,training_labels, random_vec) {
rate = 0.0
for (i in 0:4) {
temp <- (20 * i + 1):(20 * i + 20)
A = random_vec[temp]
svm_object = ksvm(training_data[-A,],training_labels[-A], type = "C-svc",
kernel = "rbfdot", sigma = Sigma, C = c)
preds <- predict(svm_object, training_data[A])
rate = rate + sum(preds == training_labels[A]) / 20
}
return(rate / 5)
}
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:50 / 10
sigmas <- 1:50 / 10
vec <- 1:1000
random_vector <- sample(vec, 1000)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
svm_object = ksvm(training_data_nnoise,training_labels_nnoise, type = "C-svc",
kernel = "rbfdot", sigma = best_sigma, C = best_c)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
costJ <- function(c,Sigma,training_data,training_labels, random_vec) {
rate = 0.0
for (i in 0:4) {
temp <- (20 * i + 1):(20 * i + 20)
A = random_vec[temp]
svm_object = ksvm(training_data[-A,],training_labels[-A], type = "C-svc",
kernel = "rbfdot", sigma = Sigma, C = c)
preds <- predict(svm_object, training_data[A,])
rate = rate + sum(preds == training_labels[A]) / 20
}
return(rate / 5)
}
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:50 / 10
sigmas <- 1:50 / 10
vec <- 1:1000
random_vector <- sample(vec, 1000)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:50 / 10
sigmas <- 1:50 / 10
vec <- 1:100
random_vector <- sample(vec, 100)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:30 / 10
sigmas <- 1:30 / 10
vec <- 1:100
random_vector <- sample(vec, 100)
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:30 / 10
sigmas <- 1:30 / 10
vec <- 1:100
random_vector <- sample(vec, 100)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
print("pass")
}
}
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
svm_object = ksvm(training_data_nnoise,training_labels_nnoise, type = "C-svc",
kernel = "rbfdot", sigma = best_sigma, C = best_c)
preds = predict(svm_object, testing_data_nnoise)
print(sum(preds == testing_labels_nnoise) / 1000)
preds = predict(svm_object, testing_data_nnoise)
print(sum(preds == testing_labels_nnoise) / 2000)
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:30 / 10
sigmas <- 1:30 / 10
vec <- 1:100
random_vector <- sample(vec, 100)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_noise,training_labels_noise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = best_sigma, C = best_c)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 0.1)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 0.1)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 0.1)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 0.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1.3)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1.4)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 1.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 1.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.4, C = 1.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.4, C = 1.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 1.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.6, C = 1.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 1.4)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 1.6)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 2.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 4.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 4.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 4.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 4.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 3, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 5, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 5, C = 10.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 5, C = 7.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 3, C = 7.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 3, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
help("princomp")
l1
l2
l1
l1
l1
1
v
v
tx <- v * t(v)
t(v)
v * t(v)
v * v
v %*% t(v)
diag(5)
help("sum)
"\"
help("sum")
helo("factanal")
help("factanal")
setwd('~/Documents/undergraduate/courses/freshman_2/multistat/hw6/')
library(MASS)
library(distances)
readdata <- read.csv('./Wholesale customers data.csv')
data_new <- readdata[,3:8]
readdata
dim(data_new)
data_new <- as.matrix(data_new)
dim(data_new)
data_new
data_new.dist <- dist(data_new)
data_new.mds <- cmdscale(data_new.dist, k=339, eig=T)
par(pty='s')
plot(data_new.mds$points[,1], data_new.mds$points[,2],type='n')
text(data_new.mds$points[,1], data_new.mds$points[,2],
labels=readdata$Region,col=readdata$Channel)
temp <- c()
for (i in 1:440) {
if (data_new.mds$points[,1][i] < 2 & data_new.mds$points[,1][i] > -2) {
temp <- append(temp,i)
}
}
par(pty='s')
plot(data_new.mds$points[,1][temp], data_new.mds$points[,2][temp],type='n')
text(data_new.mds$points[,1][temp], data_new.mds$points[,2][temp],
labels=(readdata$Region)[temp],col=readdata$Channel[temp])
data_new.dist <- mahalanobis.dist(data_new)
labs <- rep(0,440)
for (i in 1:440) {
labs[i] <- (readdata$Channel[i]-1) * 3 + readdata$Region[i]
}
library(distances)
labs <- matrix(labs,440,1)
data_new <- rbind(data_new, labs)
data_new <- cbind(data_new, labs)
dim(data_new)
data_new <- cbind(labs, data_new)
data_new[1:10,]
data_new <- readdata[,3:8]
dim(data_new)
data_new <- as.matrix(data_new)
dim(data_new)
labs <- rep(0,440)
for (i in 1:440) {
labs[i] <- (readdata$Channel[i]-1) * 3 + readdata$Region[i]
}
labs <- matrix(labs,440,1)
data_new <- cbind(labs, data_new)
centres <- matrix(0,6,6)
S <- as.matrix(var(data_new[,-1]))
dim(data_new)
data_new[1:10,]
dim(S)
labs
labs == 3
mahal <- matrix(0,440,440)
for(i in 1:6) {
centres[i,] <- apply(data_new[labs==i,-1],2,mean)
}
for(i in 1:6) {
centres[i,] <- apply(data_new[labs==i,-1],2,mean)
}
for(i in 1:6) {
mahal[i,] = mahalanobis(data_new[,-1], centres[i,], S)
}
coords <- cmdscale(mahal)
plot(coords)
dim(mahal)
coords <- cmdscale(mahal)
plot(coords$points[,1], coords$points[,2])
for(i in 1:6) {
centres[i,] <- apply(data_new[labs==i,-1],2,mean)
}
for(i in 1:440) {
mahal[i,] = mahalanobis(data_new[,-1], data_new[i,-1], S)
}
coords <- cmdscale(mahal)
plot(coords$points[,1], coords$points[,2])
coords <- cmdscale(mahal)
plot(coords, coords)
mahal[1:10,1:10]
coords <- cmdscale(mahal)
plot(coords)
mahal <- matrix(0,6,6)
for(i in 1:6) {
centres[i,] <- apply(data_new[labs==i,-1],2,mean)
}
for(i in 1:440) {
mahal[i,] = mahalanobis(centres, centres[i,], S)
}
coords <- cmdscale(mahal)
plot(coords)
for(i in 1:440) {
mahal[i,] = mahalanobis(centres, centres[i,], S)
}
coords <- cmdscale(mahal)
plot(coords, type = 'n')
text(coords, labels = c(1,2,3,1,2,3),
col = c(1,1,1,2,2,2))
library(MASS)
library(distances)
readdata <- read.csv('./Wholesale customers data.csv')
data_new <- readdata[,3:8]
dim(data_new)
data_new <- as.matrix(data_new)
dim(data_new)
labs <- rep(0,440)
for (i in 1:440) {
labs[i] <- (readdata$Channel[i]-1) * 3 + readdata$Region[i]
}
labs <- matrix(labs,440,1)
data_new <- cbind(labs, data_new)
centres <- matrix(0,6,6)
S <- as.matrix(var(data_new[,-1]))
mahal <- matrix(0,6,6)
for(i in 1:6) {
centres[i,] <- apply(data_new[labs==i,-1],2,mean)
}
for(i in 1:440) {
mahal[i,] = mahalanobis(centres, centres[i,], S)
}
