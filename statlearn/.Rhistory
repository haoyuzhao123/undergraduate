data_mat <- cbind(data_mat, noise_mat)
}
return(matrix(data_mat,n))
}
generate_without_noise <- function(n) {
c1 <- generate_class_one(100)
c2 <- generate_class_two(100)
training_data <- rbind(c1, c2)
return(training_data)
}
generate_with_noise <- function(n) {
c1_n <- generate_class_one(100, TRUE)
c2_n <- generate_class_two(100, TRUE)
training_data <- rbind(c1_n, c2_n)
return(training_data)
}
generate_labels <- function(n) {
labels <- c(rep(1,n), rep(0,n))
}
training_data_nnoise <- generate_without_noise(100)
training_data_noise <- generate_with_noise(100)
testing_data_nnoise <- generate_without_noise(1000)
testing_data_noise <- generate_with_noise(1000)
raining_labels_nnoise <- generate_labels(100)
training_labels_noise <- generate_labels(100)
testing_labels_nnoise <- generate_labels(1000)
testing_labels_noise <- generate_labels(1000)
training_labels_nnoise <- generate_labels(100)
svm_object = ksvm(training_data_nnoise, training_labels_nnoise)
svm_object = ksvm(training_data_nnoise, training_labels_nnoise, type = "C-svc")
svm_object = ksvm(training_data_nnoise, training_labels_nnoise, type = "C-svc", kernel = "rbfdot")
svm_object = ksvm(training_data_nnoise, training_labels_nnoise, type = "C-svc", kernel = "rbfdot(sigma = 1)")
svm_object = ksvm(training_data_nnoise, training_labels_nnoise, type = "C-svc", kernel = "rbfdot", sigma = 1)
svm_object
svm_object = ksvm(training_data_nnoise, training_labels_nnoise, type = "C-svc", kernel = "rbfdot", sigma = 0.1)
svm_object
svm_object = ksvm(training_data_nnoise, training_labels_nnoise, type = "C-svc", kernel = "rbfdot", sigma = 0.01)
svm_object
help(svm_object)
help("ksvm")
ksvm.error
svm_object.error
error(svm_object)
1:10
1:10:0.1
1:10:
1:10
1:10
t <- 1:20
t / 20
1:20 / 20
vector <- 1:20
vector
t <- sample(vector, 10, replace = FALSE)
t1 <- sample(vector, 5, replace = FALSE)
t2 <- sample(vector, 5, replace = FALSE)
t
t1
t2
slpit
split
split(vector)
p <- split(vector, 2)
p
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
sample(vector, 20)
vector(1)
vector(1:200)
vector(1:10)
vector[1:10]
vector[-1:10]
vector[-(1:10)]
t <- matrix(1:20, 4, 5)
t
t[c(1,2,4),]
t <- (1+1):(5+5)
t
generate_class_one <- function(n, withnoise = FALSE) {
if (withnoise == FALSE) {
data_vec <- rnorm(4*n)
return(matrix(data_vec, n, 4))
}
else {
data_vec <- rnorm(10 * n)
return(matrix(data_vec, n, 10))
}
}
generate_class_two <- function(n, withnoise = FALSE) {
data_mat <- matrix(nrow = 0, ncol = 4)
i = 0
while (i < n) {
vec <- rnorm(4)
value = sum(vec ** 2)
if (value > 9 && value < 16) {
i = i + 1
data_mat <- rbind(data_mat, vec)
}
}
if (withnoise == TRUE) {
noise_data <- rnorm(6 * n)
noise_mat <- matrix(noise_data, n, 6)
data_mat <- cbind(data_mat, noise_mat)
}
return(matrix(data_mat,n))
}
generate_without_noise <- function(n) {
c1 <- generate_class_one(n)
c2 <- generate_class_two(n)
training_data <- rbind(c1, c2)
return(training_data)
}
generate_with_noise <- function(n) {
c1_n <- generate_class_one(n, TRUE)
c2_n <- generate_class_two(n, TRUE)
training_data <- rbind(c1_n, c2_n)
return(training_data)
}
generate_labels <- function(n) {
labels <- c(rep(1,n), rep(0,n))
}
training_data_nnoise <- generate_without_noise(100)
training_data_noise <- generate_with_noise(100)
testing_data_nnoise <- generate_without_noise(1000)
testing_data_noise <- generate_with_noise(1000)
training_labels_nnoise <- generate_labels(100)
training_labels_noise <- generate_labels(100)
testing_labels_nnoise <- generate_labels(1000)
testing_labels_noise <- generate_labels(1000)
set.seed(123123)
costJ <- function(c,Sigma,training_data,training_labels, random_vec) {
rate = 0.0
for (i in 0:4) {
temp <- (20 * i + 1):(20 * i + 20)
A = random_vec[temp]
svm_object = ksvm(training_data[-A,],training_labels[-A], type = "C-svc",
kernel = "rbfdot", sigma = Sigma, C = c)
preds <- predict(svm_object, training_data[A])
rate = rate + sum(preds == training_labels[A]) / 20
}
return(rate / 5)
}
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:50 / 10
sigmas <- 1:50 / 10
vec <- 1:1000
random_vector <- sample(vec, 1000)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
svm_object = ksvm(training_data_nnoise,training_labels_nnoise, type = "C-svc",
kernel = "rbfdot", sigma = best_sigma, C = best_c)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
costJ <- function(c,Sigma,training_data,training_labels, random_vec) {
rate = 0.0
for (i in 0:4) {
temp <- (20 * i + 1):(20 * i + 20)
A = random_vec[temp]
svm_object = ksvm(training_data[-A,],training_labels[-A], type = "C-svc",
kernel = "rbfdot", sigma = Sigma, C = c)
preds <- predict(svm_object, training_data[A,])
rate = rate + sum(preds == training_labels[A]) / 20
}
return(rate / 5)
}
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:50 / 10
sigmas <- 1:50 / 10
vec <- 1:1000
random_vector <- sample(vec, 1000)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:50 / 10
sigmas <- 1:50 / 10
vec <- 1:100
random_vector <- sample(vec, 100)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:30 / 10
sigmas <- 1:30 / 10
vec <- 1:100
random_vector <- sample(vec, 100)
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:30 / 10
sigmas <- 1:30 / 10
vec <- 1:100
random_vector <- sample(vec, 100)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
print("pass")
}
}
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_nnoise,training_labels_nnoise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
svm_object = ksvm(training_data_nnoise,training_labels_nnoise, type = "C-svc",
kernel = "rbfdot", sigma = best_sigma, C = best_c)
preds = predict(svm_object, testing_data_nnoise)
print(sum(preds == testing_labels_nnoise) / 1000)
preds = predict(svm_object, testing_data_nnoise)
print(sum(preds == testing_labels_nnoise) / 2000)
max_rate = 0.0
best_sigma = 0.0
best_c = 0.0
Cs <- 1:30 / 10
sigmas <- 1:30 / 10
vec <- 1:100
random_vector <- sample(vec, 100)
for (c in Cs) {
for (sigma in sigmas) {
temp_rate = costJ(c,sigma,training_data_noise,training_labels_noise,random_vector)
if (temp_rate > max_rate) {
max_rate = temp_rate
best_sigma = sigma
best_c = c
}
}
}
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = best_sigma, C = best_c)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 0.1
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 0.1)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 0.1)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 0.1)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 0.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1.3)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1.4)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 1.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 1.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 1.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.4, C = 1.5)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.4, C = 1.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 1.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.6, C = 1.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 1.4)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 1.6)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 2.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.5, C = 4.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 4.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 4.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 4.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.2, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.1, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 0.3, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 3, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 5, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 5, C = 10.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 5, C = 7.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 3, C = 7.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
svm_object = ksvm(training_data_noise,training_labels_noise, type = "C-svc",
kernel = "rbfdot", sigma = 3, C = 5.0)
preds = predict(svm_object, testing_data_noise)
print(sum(preds == testing_labels_noise) / 2000)
help("princomp")
l1
l2
l1
l1
l1
1
v
v
tx <- v * t(v)
t(v)
v * t(v)
v * v
v %*% t(v)
diag(5)
help("sum)
"\"
help("sum")
helo("factanal")
help("factanal")
setwd('codes/pycode/undergraduate/statlearn/')
ls
ls()
pwd()
getwd()
data3 <- read.csv('temp_balance.csv', header = T)
temp_dis10_maxmin <- data3  #固定距离为10
temp_dis10_maxmin <- transform(temp_dis10_maxmin, rain_levl =
ifelse(Expected<7, "low",
ifelse(Expected < 25, "med", "high")))
temp_dis10_maxmin$rain_levl <- factor(temp_dis10_maxmin$rain_levl,
levels = c("low", "med", "high") )
qplot(rain_levl, Ref, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
library(ggplot2)
data3 <- read.csv('temp_balance.csv', header = T)
temp_dis10_maxmin <- data3  #固定距离为10
temp_dis10_maxmin <- transform(temp_dis10_maxmin, rain_levl =
ifelse(Expected<7, "low",
ifelse(Expected < 25, "med", "high")))
temp_dis10_maxmin$rain_levl <- factor(temp_dis10_maxmin$rain_levl,
levels = c("low", "med", "high") )
qplot(rain_levl, Ref, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
temp_dis10_maxmin$rain_levl <- factor(temp_dis10_maxmin$rain_levl,
levels = c("low", "med", "high") )
qplot(rain_levl, Kdp, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Kdp_5x5_50th, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, radardist_km, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Zdp, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Zdp, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Zdr, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
str(data3)
qplot(rain_levl, Zdr_5x5_50th, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Zdr_5x5_90th, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Zdr_5x5_10th, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Ref_5x5_10th, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Ref_5x5_50th, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Ref, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Ref_5x5_50th, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Ref_5x5_90th, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, RefComposite, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
str(data3)
qplot(rain_levl, RhoHV, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
qplot(rain_levl, Zdr, data = temp_dis10_maxmin, geom = "boxplot",
alpha = I(3/5))
